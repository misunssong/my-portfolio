//변수를 사용 할 떄는 $ 문자를 사용합니다. 첫 변수를 한번 만들어볼까요?
$primary-color: #333;
//Sass 의 변수엔 변수범위가 있습니다.  변수를 특정 selector (선택자) 에서 선언하면 해당 selector 에서만 접근이 가능합니다.
//변수를 선언 할 때, 변수를 global (전역) 하게 설정 할 때는 !global 플래그를 사용합니다.
//추가적으로, !default 플래그는 해당 변수가 설정되지 않았거나 값이 null 일떄 값을 설정합니다.
.box {
    $primary-color:#eee !global;
    background-color:$primary-color; 
}
p {
    color: $primary-color;
}

body {
    background:pink;
    &.blue{
        background:skyblue;
    }
}
//부모 선택자를 리퍼런스 할떄는 & 문자를 사용합니다. (내장함수 예제에서도 이 문자가 사용됐었죠?)
a {
    color: black;
    &:hover {
      text-decoration: underline;
      color: gray;
    }
    &:visited {
      color: purple;
    }
}
//Sass 코드 중첩을 할 때, 4 레벨 보다 깊게 들어가지 말 것
//sibling 클래스가 container 클래스 밖에서도 사용되는것을 알게되었을땐, @at-root directive (지시자) 를 사용합니다.
.container {
    .child {
      color: blue;
    }
    @at-root .sibling {
      color: gray;
    }
  }


//Sass 에서 특정 선택자를 상속 할 때, @extend directive를 사용합니다.
// .box {
//     border: 1px solid gray;
//     padding: 10px;
//     display: inline-block;
// }

// .success-box {
//     @extend .box;
//     border: 1px solid green;
// }

//Placeholder 선택자 % 를 사용하면 상속은 할 수 있지만 해당 선택자는 컴파일되지 않습니다.
%box {
    padding: 0.5em;

}

.success-box {
    @extend %box;
    color: green;
}

.error-box {
    @extend %box;
    color: red;
}
//ixin 은 Sass 의 아주 유용한 기능 중 하나인데요, extend 와 비슷하지만 argument (인수) 를 받을 수 있습니다.
//mixin 을 선언 할 떄는 @mixin directive 를 사용하며, 이를 사용 할 때는 @include directive 를 사용합니다.
@mixin headline ($color, $size) {
    color: $color;
    font-size: $size;
}
  
h1 {
    @include headline(green, 12px);
}
//Mixin 을 응용하면 이런식으로도 사용 가능합니다
// #{ } 표현은 특정 문자열을 따로 처리하지않고 그대로 출력 할 때 사용됩니다.
//@content directive 를 사용하면 나중에 @include 하였을 때, 그 선택자 내부의 내용들이 @conent 부분에 나타나게됩니다.
@mixin media($queryString){
    @media #{$queryString} {
      @content;
    }
}

.container {
    width: 900px;
    @include media("(max-width: 767px)"){
        width: 100%;
    }
}

//Function은 위에서 소개한 mixin과도 사뭇 비슷한데요, 차이점은 mixin은 style markup을 반환하지만,  function은 @return directive를 통하여 값을 반환합니다.
//Function을 선언 할 때는,  예상하셨겠지만! @function directive를 사용합니다.

@function calc-percent($target, $container) {
    @return ($target / $container) * 100%;
}
  
@function cp($target, $container) {
    @return calc-percent($target, $container);
}
  
.my-module {
    width: calc-percent(650px, 1000px);
}